// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: company_stock_price.proto

#include "company_stock_price.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR company_stock_price::company_stock_price(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.try_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.try_varchar_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.try_char_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.try_bigtext_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trading_date_)*/nullptr
  , /*decltype(_impl_.last_login_time_)*/nullptr
  , /*decltype(_impl_.try_time_)*/nullptr
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.company_id_)*/uint64_t{0u}
  , /*decltype(_impl_.stock_price_)*/0
  , /*decltype(_impl_.try_float_)*/0
  , /*decltype(_impl_.try_bool_)*/false
  , /*decltype(_impl_.try_bit_)*/false
  , /*decltype(_impl_.try_dec_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct company_stock_priceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR company_stock_priceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~company_stock_priceDefaultTypeInternal() {}
  union {
    company_stock_price _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 company_stock_priceDefaultTypeInternal _company_stock_price_default_instance_;
static ::_pb::Metadata file_level_metadata_company_5fstock_5fprice_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_company_5fstock_5fprice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_company_5fstock_5fprice_2eproto = nullptr;

const uint32_t TableStruct_company_5fstock_5fprice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.company_id_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.stock_price_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.trading_date_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.last_login_time_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_bytes_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_bool_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_float_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_dec_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_bit_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_varchar_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_char_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_time_),
  PROTOBUF_FIELD_OFFSET(::company_stock_price, _impl_.try_bigtext_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::company_stock_price)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_company_stock_price_default_instance_._instance,
};

const char descriptor_table_protodef_company_5fstock_5fprice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031company_stock_price.proto\032\037google/prot"
  "obuf/timestamp.proto\"\365\002\n\023company_stock_p"
  "rice\022\n\n\002id\030\001 \001(\003\022\022\n\ncompany_id\030\002 \001(\004\022\023\n\013"
  "stock_price\030\003 \001(\001\0220\n\014trading_date\030\004 \001(\0132"
  "\032.google.protobuf.Timestamp\0223\n\017last_logi"
  "n_time\030\005 \001(\0132\032.google.protobuf.Timestamp"
  "\022\021\n\ttry_bytes\030\006 \001(\014\022\020\n\010try_bool\030\007 \001(\010\022\021\n"
  "\ttry_float\030\010 \001(\002\022\017\n\007try_dec\030\t \001(\001\022\017\n\007try"
  "_bit\030\n \001(\010\022\023\n\013try_varchar\030\013 \001(\t\022\020\n\010try_c"
  "har\030\014 \001(\t\022,\n\010try_time\030\r \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\023\n\013try_bigtext\030\016 \001(\tb\006pr"
  "oto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_company_5fstock_5fprice_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_company_5fstock_5fprice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_company_5fstock_5fprice_2eproto = {
    false, false, 444, descriptor_table_protodef_company_5fstock_5fprice_2eproto,
    "company_stock_price.proto",
    &descriptor_table_company_5fstock_5fprice_2eproto_once, descriptor_table_company_5fstock_5fprice_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_company_5fstock_5fprice_2eproto::offsets,
    file_level_metadata_company_5fstock_5fprice_2eproto, file_level_enum_descriptors_company_5fstock_5fprice_2eproto,
    file_level_service_descriptors_company_5fstock_5fprice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_company_5fstock_5fprice_2eproto_getter() {
  return &descriptor_table_company_5fstock_5fprice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_company_5fstock_5fprice_2eproto(&descriptor_table_company_5fstock_5fprice_2eproto);

// ===================================================================

class company_stock_price::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& trading_date(const company_stock_price* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_login_time(const company_stock_price* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& try_time(const company_stock_price* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
company_stock_price::_Internal::trading_date(const company_stock_price* msg) {
  return *msg->_impl_.trading_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
company_stock_price::_Internal::last_login_time(const company_stock_price* msg) {
  return *msg->_impl_.last_login_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
company_stock_price::_Internal::try_time(const company_stock_price* msg) {
  return *msg->_impl_.try_time_;
}
void company_stock_price::clear_trading_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.trading_date_ != nullptr) {
    delete _impl_.trading_date_;
  }
  _impl_.trading_date_ = nullptr;
}
void company_stock_price::clear_last_login_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_login_time_ != nullptr) {
    delete _impl_.last_login_time_;
  }
  _impl_.last_login_time_ = nullptr;
}
void company_stock_price::clear_try_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.try_time_ != nullptr) {
    delete _impl_.try_time_;
  }
  _impl_.try_time_ = nullptr;
}
company_stock_price::company_stock_price(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:company_stock_price)
}
company_stock_price::company_stock_price(const company_stock_price& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  company_stock_price* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.try_bytes_){}
    , decltype(_impl_.try_varchar_){}
    , decltype(_impl_.try_char_){}
    , decltype(_impl_.try_bigtext_){}
    , decltype(_impl_.trading_date_){nullptr}
    , decltype(_impl_.last_login_time_){nullptr}
    , decltype(_impl_.try_time_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.company_id_){}
    , decltype(_impl_.stock_price_){}
    , decltype(_impl_.try_float_){}
    , decltype(_impl_.try_bool_){}
    , decltype(_impl_.try_bit_){}
    , decltype(_impl_.try_dec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.try_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_try_bytes().empty()) {
    _this->_impl_.try_bytes_.Set(from._internal_try_bytes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.try_varchar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_varchar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_try_varchar().empty()) {
    _this->_impl_.try_varchar_.Set(from._internal_try_varchar(), 
      _this->GetArenaForAllocation());
  }
  _impl_.try_char_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_char_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_try_char().empty()) {
    _this->_impl_.try_char_.Set(from._internal_try_char(), 
      _this->GetArenaForAllocation());
  }
  _impl_.try_bigtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_bigtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_try_bigtext().empty()) {
    _this->_impl_.try_bigtext_.Set(from._internal_try_bigtext(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trading_date()) {
    _this->_impl_.trading_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.trading_date_);
  }
  if (from._internal_has_last_login_time()) {
    _this->_impl_.last_login_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_login_time_);
  }
  if (from._internal_has_try_time()) {
    _this->_impl_.try_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.try_time_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.try_dec_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.try_dec_));
  // @@protoc_insertion_point(copy_constructor:company_stock_price)
}

inline void company_stock_price::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.try_bytes_){}
    , decltype(_impl_.try_varchar_){}
    , decltype(_impl_.try_char_){}
    , decltype(_impl_.try_bigtext_){}
    , decltype(_impl_.trading_date_){nullptr}
    , decltype(_impl_.last_login_time_){nullptr}
    , decltype(_impl_.try_time_){nullptr}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.company_id_){uint64_t{0u}}
    , decltype(_impl_.stock_price_){0}
    , decltype(_impl_.try_float_){0}
    , decltype(_impl_.try_bool_){false}
    , decltype(_impl_.try_bit_){false}
    , decltype(_impl_.try_dec_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.try_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.try_varchar_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_varchar_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.try_char_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_char_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.try_bigtext_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.try_bigtext_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

company_stock_price::~company_stock_price() {
  // @@protoc_insertion_point(destructor:company_stock_price)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void company_stock_price::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.try_bytes_.Destroy();
  _impl_.try_varchar_.Destroy();
  _impl_.try_char_.Destroy();
  _impl_.try_bigtext_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trading_date_;
  if (this != internal_default_instance()) delete _impl_.last_login_time_;
  if (this != internal_default_instance()) delete _impl_.try_time_;
}

void company_stock_price::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void company_stock_price::Clear() {
// @@protoc_insertion_point(message_clear_start:company_stock_price)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.try_bytes_.ClearToEmpty();
  _impl_.try_varchar_.ClearToEmpty();
  _impl_.try_char_.ClearToEmpty();
  _impl_.try_bigtext_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trading_date_ != nullptr) {
    delete _impl_.trading_date_;
  }
  _impl_.trading_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_login_time_ != nullptr) {
    delete _impl_.last_login_time_;
  }
  _impl_.last_login_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.try_time_ != nullptr) {
    delete _impl_.try_time_;
  }
  _impl_.try_time_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.try_dec_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.try_dec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* company_stock_price::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 company_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.company_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double stock_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.stock_price_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp trading_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trading_date(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_login_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_login_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes try_bytes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_try_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool try_bool = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.try_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float try_float = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.try_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double try_dec = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.try_dec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool try_bit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.try_bit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string try_varchar = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_try_varchar();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "company_stock_price.try_varchar"));
        } else
          goto handle_unusual;
        continue;
      // string try_char = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_try_char();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "company_stock_price.try_char"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp try_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_try_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string try_bigtext = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_try_bigtext();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "company_stock_price.try_bigtext"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* company_stock_price::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:company_stock_price)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // uint64 company_id = 2;
  if (this->_internal_company_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_company_id(), target);
  }

  // double stock_price = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stock_price = this->_internal_stock_price();
  uint64_t raw_stock_price;
  memcpy(&raw_stock_price, &tmp_stock_price, sizeof(tmp_stock_price));
  if (raw_stock_price != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_stock_price(), target);
  }

  // .google.protobuf.Timestamp trading_date = 4;
  if (this->_internal_has_trading_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trading_date(this),
        _Internal::trading_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_login_time = 5;
  if (this->_internal_has_last_login_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::last_login_time(this),
        _Internal::last_login_time(this).GetCachedSize(), target, stream);
  }

  // bytes try_bytes = 6;
  if (!this->_internal_try_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_try_bytes(), target);
  }

  // bool try_bool = 7;
  if (this->_internal_try_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_try_bool(), target);
  }

  // float try_float = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_try_float = this->_internal_try_float();
  uint32_t raw_try_float;
  memcpy(&raw_try_float, &tmp_try_float, sizeof(tmp_try_float));
  if (raw_try_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_try_float(), target);
  }

  // double try_dec = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_try_dec = this->_internal_try_dec();
  uint64_t raw_try_dec;
  memcpy(&raw_try_dec, &tmp_try_dec, sizeof(tmp_try_dec));
  if (raw_try_dec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_try_dec(), target);
  }

  // bool try_bit = 10;
  if (this->_internal_try_bit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_try_bit(), target);
  }

  // string try_varchar = 11;
  if (!this->_internal_try_varchar().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_try_varchar().data(), static_cast<int>(this->_internal_try_varchar().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "company_stock_price.try_varchar");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_try_varchar(), target);
  }

  // string try_char = 12;
  if (!this->_internal_try_char().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_try_char().data(), static_cast<int>(this->_internal_try_char().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "company_stock_price.try_char");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_try_char(), target);
  }

  // .google.protobuf.Timestamp try_time = 13;
  if (this->_internal_has_try_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::try_time(this),
        _Internal::try_time(this).GetCachedSize(), target, stream);
  }

  // string try_bigtext = 14;
  if (!this->_internal_try_bigtext().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_try_bigtext().data(), static_cast<int>(this->_internal_try_bigtext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "company_stock_price.try_bigtext");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_try_bigtext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:company_stock_price)
  return target;
}

size_t company_stock_price::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:company_stock_price)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes try_bytes = 6;
  if (!this->_internal_try_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_try_bytes());
  }

  // string try_varchar = 11;
  if (!this->_internal_try_varchar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_try_varchar());
  }

  // string try_char = 12;
  if (!this->_internal_try_char().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_try_char());
  }

  // string try_bigtext = 14;
  if (!this->_internal_try_bigtext().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_try_bigtext());
  }

  // .google.protobuf.Timestamp trading_date = 4;
  if (this->_internal_has_trading_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trading_date_);
  }

  // .google.protobuf.Timestamp last_login_time = 5;
  if (this->_internal_has_last_login_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_login_time_);
  }

  // .google.protobuf.Timestamp try_time = 13;
  if (this->_internal_has_try_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.try_time_);
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // uint64 company_id = 2;
  if (this->_internal_company_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_company_id());
  }

  // double stock_price = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stock_price = this->_internal_stock_price();
  uint64_t raw_stock_price;
  memcpy(&raw_stock_price, &tmp_stock_price, sizeof(tmp_stock_price));
  if (raw_stock_price != 0) {
    total_size += 1 + 8;
  }

  // float try_float = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_try_float = this->_internal_try_float();
  uint32_t raw_try_float;
  memcpy(&raw_try_float, &tmp_try_float, sizeof(tmp_try_float));
  if (raw_try_float != 0) {
    total_size += 1 + 4;
  }

  // bool try_bool = 7;
  if (this->_internal_try_bool() != 0) {
    total_size += 1 + 1;
  }

  // bool try_bit = 10;
  if (this->_internal_try_bit() != 0) {
    total_size += 1 + 1;
  }

  // double try_dec = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_try_dec = this->_internal_try_dec();
  uint64_t raw_try_dec;
  memcpy(&raw_try_dec, &tmp_try_dec, sizeof(tmp_try_dec));
  if (raw_try_dec != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData company_stock_price::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    company_stock_price::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*company_stock_price::GetClassData() const { return &_class_data_; }


void company_stock_price::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<company_stock_price*>(&to_msg);
  auto& from = static_cast<const company_stock_price&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:company_stock_price)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_try_bytes().empty()) {
    _this->_internal_set_try_bytes(from._internal_try_bytes());
  }
  if (!from._internal_try_varchar().empty()) {
    _this->_internal_set_try_varchar(from._internal_try_varchar());
  }
  if (!from._internal_try_char().empty()) {
    _this->_internal_set_try_char(from._internal_try_char());
  }
  if (!from._internal_try_bigtext().empty()) {
    _this->_internal_set_try_bigtext(from._internal_try_bigtext());
  }
  if (from._internal_has_trading_date()) {
    _this->_internal_mutable_trading_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_trading_date());
  }
  if (from._internal_has_last_login_time()) {
    _this->_internal_mutable_last_login_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_login_time());
  }
  if (from._internal_has_try_time()) {
    _this->_internal_mutable_try_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_try_time());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_company_id() != 0) {
    _this->_internal_set_company_id(from._internal_company_id());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stock_price = from._internal_stock_price();
  uint64_t raw_stock_price;
  memcpy(&raw_stock_price, &tmp_stock_price, sizeof(tmp_stock_price));
  if (raw_stock_price != 0) {
    _this->_internal_set_stock_price(from._internal_stock_price());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_try_float = from._internal_try_float();
  uint32_t raw_try_float;
  memcpy(&raw_try_float, &tmp_try_float, sizeof(tmp_try_float));
  if (raw_try_float != 0) {
    _this->_internal_set_try_float(from._internal_try_float());
  }
  if (from._internal_try_bool() != 0) {
    _this->_internal_set_try_bool(from._internal_try_bool());
  }
  if (from._internal_try_bit() != 0) {
    _this->_internal_set_try_bit(from._internal_try_bit());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_try_dec = from._internal_try_dec();
  uint64_t raw_try_dec;
  memcpy(&raw_try_dec, &tmp_try_dec, sizeof(tmp_try_dec));
  if (raw_try_dec != 0) {
    _this->_internal_set_try_dec(from._internal_try_dec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void company_stock_price::CopyFrom(const company_stock_price& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:company_stock_price)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool company_stock_price::IsInitialized() const {
  return true;
}

void company_stock_price::InternalSwap(company_stock_price* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.try_bytes_, lhs_arena,
      &other->_impl_.try_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.try_varchar_, lhs_arena,
      &other->_impl_.try_varchar_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.try_char_, lhs_arena,
      &other->_impl_.try_char_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.try_bigtext_, lhs_arena,
      &other->_impl_.try_bigtext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(company_stock_price, _impl_.try_dec_)
      + sizeof(company_stock_price::_impl_.try_dec_)
      - PROTOBUF_FIELD_OFFSET(company_stock_price, _impl_.trading_date_)>(
          reinterpret_cast<char*>(&_impl_.trading_date_),
          reinterpret_cast<char*>(&other->_impl_.trading_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata company_stock_price::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_company_5fstock_5fprice_2eproto_getter, &descriptor_table_company_5fstock_5fprice_2eproto_once,
      file_level_metadata_company_5fstock_5fprice_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::company_stock_price*
Arena::CreateMaybeMessage< ::company_stock_price >(Arena* arena) {
  return Arena::CreateMessageInternal< ::company_stock_price >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
